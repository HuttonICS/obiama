/*
 * uk.ac.hutton.obiama.exception: Bug.java Copyright (C) 2013 The James Hutton
 * Institute
 * 
 * This file is part of obiama-0.3.
 * 
 * obiama-0.3 is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 * 
 * obiama-0.3 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with obiama-0.3. If not, see <http://www.gnu.org/licenses/>.
 * 
 * Contact information: Gary Polhill, The James Hutton Institute, Craigiebuckler,
 * Aberdeen. AB15 8QH. UK. gary.polhill@hutton.ac.uk
 */
package uk.ac.hutton.obiama.exception;

import java.lang.reflect.Modifier;

import uk.ac.hutton.obiama.action.Process;
import uk.ac.hutton.util.Reflection;

/**
 * <!-- Bug -->
 * 
 * A Bug is a fatal error condition that occurs in the code, which is clearly
 * the result of programmer error rather than user error. Since others may be
 * contributing code through implementing Processes, we distinguish between bugs
 * caused by Processes misusing OBIAMA, and other bugs, by allowing the former
 * to give an error message. (In general there is little point in bugs having an
 * error message other than where they occurred, as the programmer will need to
 * investigate.)
 * 
 * @author Gary Polhill
 */
public class Bug extends RuntimeException {
  /**
   * UID for serialisation
   */
  private static final long serialVersionUID = -5747538352648801230L;

  /**
   * Constructor for Bug; create an exception and call the private method
   */
  public Bug() {
    this(new Exception());
  }

  /**
   * Constructor for Bugs caused by contributor error. These have a message.
   * 
   * @param message
   */
  public Bug(String message) {
    this(message, new Exception());
  }

  /**
   * Private constructor for Bug. Take the exception argument and use the stack
   * trace to get the file and line where the Bug is detected.
   * 
   * @param e Exception passed to use the stack trace
   */
  private Bug(Exception e) {
    super("Bug! File: " + e.getStackTrace()[1].getFileName() + ", Line: " + e.getStackTrace()[1].getLineNumber());
  }

  /**
   * Private constructor for a Bug with a message for a potential programmer.
   * Get the full message to give the user from the static method.
   * 
   * @param message Error message describing the cause of the bug
   * @param e An exception generated by the main constructor to get the stack
   *          trace
   */
  private Bug(String message, Exception e) {
    super(buildMessage(message, e));
  }

  /**
   * <!-- buildMessage -->
   * 
   * Build a full error message for the user. This uses the stack to determine
   * the {@link Process} that most likely caused the bug (the one nearest the
   * top of the stack).
   * 
   * @param message The message giving more information for the programmer of
   *          the Process.
   * @param e An exception used to access the stack
   * @return A message to give the user.
   */
  private static String buildMessage(String message, Exception e) {
    StackTraceElement stack[] = e.getStackTrace();
    String processCausingProblem = null;
    for(int i = 1; i < stack.length; i++) {
      String className = stack[i].getClassName();
      Class<?> cls;
      try {
        cls = Class.forName(className);
        if(cls != null) {
          if(!Modifier.isAbstract(cls.getModifiers()) && Reflection.classImplements(cls, Process.class)) {
            processCausingProblem = className;
            break;
          }
        }
      }
      catch(ClassNotFoundException e1) {
        // ignore it
      }
    }
    if(processCausingProblem == null) {
      return ("Bug! " + message + " (File: " + e.getStackTrace()[1].getFileName() + ", Line: "
        + e.getStackTrace()[1].getLineNumber() + ").");
    }
    return ("Bug (probably caused by process " + processCausingProblem + ")! " + message + " (File: "
      + e.getStackTrace()[1].getFileName() + ", Line: " + e.getStackTrace()[1].getLineNumber() + ")");
  }
}
